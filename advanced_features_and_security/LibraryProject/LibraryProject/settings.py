# settings.py (relevant security additions/updates)

import os
from django.core.exceptions import ImproperlyConfigured
"""
Django settings for LibraryProject project.

Generated by 'django-admin startproject' using Django 5.2.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.2/ref/settings/
"""

from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'django-insecure-_k+thr#en=r2%j&n1zvc__sxt+zgf)9c=sp##fchqbr^^gv#f*'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "bookshelf",  # <-- replace with your app name
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'LibraryProject.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'LibraryProject.wsgi.application'


# Database
# https://docs.djangoproject.com/en/5.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': BASE_DIR / 'db.sqlite3',
    }
}


# Password validation
# https://docs.djangoproject.com/en/5.2/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]


# Internationalization
# https://docs.djangoproject.com/en/5.2/topics/i18n/

LANGUAGE_CODE = 'en-us'

TIME_ZONE = 'UTC'

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/5.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'

LOGIN_REDIRECT_URL = "list_books"   # after login, go to books page
LOGOUT_REDIRECT_URL = "login"       # after logout, go back to login



INSTALLED_APPS = [
    ...,
    "bookshelf",  # register the app
]

AUTH_USER_MODEL = "bookshelf.CustomUser"

# Media setup (for profile photos)
MEDIA_URL = "/media/"
MEDIA_ROOT = BASE_DIR / "media"



def env_bool(name, default=False):
    return os.getenv(name, str(default)).lower() in ("1", "true", "yes")

# ----- Basic production toggles -----
DEBUG = env_bool("DJANGO_DEBUG", False)  # Always False in production
if DEBUG:
    # In dev you might allow localhost
    ALLOWED_HOSTS = ["localhost", "127.0.0.1"]
else:
    # Replace with your real hostnames (example below)
    ALLOWED_HOSTS = os.getenv("DJANGO_ALLOWED_HOSTS", "example.com").split(",")

# ----- HTTPS / cookies / HSTS -----
# Redirect HTTP to HTTPS (set True in production behind TLS)
SECURE_SSL_REDIRECT = env_bool("SECURE_SSL_REDIRECT", True)

# Ensure cookies are only sent over HTTPS
SESSION_COOKIE_SECURE = env_bool("SESSION_COOKIE_SECURE", True)
CSRF_COOKIE_SECURE = env_bool("CSRF_COOKIE_SECURE", True)

# Prevent browser from guessing content types — reduces MIME sniffing attacks
SECURE_CONTENT_TYPE_NOSNIFF = True

# Enable XSS protection header
SECURE_BROWSER_XSS_FILTER = True

# Prevent clickjacking
X_FRAME_OPTIONS = "DENY"  # or "SAMEORIGIN" if you need frames in same site

# HSTS — instruct browsers to use HTTPS. Only enable in production after HTTPS is working.
SECURE_HSTS_SECONDS = int(os.getenv("SECURE_HSTS_SECONDS", 31536000))  # 1 year
SECURE_HSTS_INCLUDE_SUBDOMAINS = True
SECURE_HSTS_PRELOAD = True

# ----- CSRF settings -----
# Uses the secure cookie above; also ensure CSRF_TRUSTED_ORIGINS if your host uses custom domain or proxy.
CSRF_TRUSTED_ORIGINS = os.getenv("CSRF_TRUSTED_ORIGINS", "https://example.com").split(",")

# ----- Content Security Policy options (if using django-csp) -----
# If you install django-csp, add 'csp' to INSTALLED_APPS and 'csp.middleware.CSPMiddleware' near top of MIDDLEWARE.
# Example shown in CSP section below.

# Tell Django how to detect HTTPS when behind a proxy/load balancer
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')
